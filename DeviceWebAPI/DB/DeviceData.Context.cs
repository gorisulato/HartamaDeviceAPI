//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeviceWebAPI.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Hartama_IOTEntities : DbContext
    {
        public Hartama_IOTEntities()
            : base("name=Hartama_IOTEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TSensorTest> TSensorTests { get; set; }
        public virtual DbSet<TDetailDevice> TDetailDevices { get; set; }
        public virtual DbSet<TDetailGroupSensor> TDetailGroupSensors { get; set; }
        public virtual DbSet<PSensorParameter> PSensorParameters { get; set; }
        public virtual DbSet<PDevice> PDevices { get; set; }
    
        public virtual int P_NumberSeri(string mODUL, string sPREFIX, Nullable<int> pANJANG, ObjectParameter nOMORSERI)
        {
            var mODULParameter = mODUL != null ?
                new ObjectParameter("MODUL", mODUL) :
                new ObjectParameter("MODUL", typeof(string));
    
            var sPREFIXParameter = sPREFIX != null ?
                new ObjectParameter("SPREFIX", sPREFIX) :
                new ObjectParameter("SPREFIX", typeof(string));
    
            var pANJANGParameter = pANJANG.HasValue ?
                new ObjectParameter("PANJANG", pANJANG) :
                new ObjectParameter("PANJANG", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_NumberSeri", mODULParameter, sPREFIXParameter, pANJANGParameter, nOMORSERI);
        }
    
        public virtual ObjectResult<ReceiveDataLOG_Result> ReceiveDataLOG(string device_id, Nullable<decimal> arus, Nullable<decimal> arus1, Nullable<decimal> arus2, Nullable<decimal> daya, Nullable<decimal> daya1, Nullable<decimal> daya2, Nullable<decimal> dist, Nullable<decimal> distances, Nullable<decimal> electric, Nullable<decimal> enviro, Nullable<decimal> gas, Nullable<decimal> humidity, Nullable<decimal> koneksi, Nullable<decimal> power, Nullable<decimal> power1, Nullable<decimal> power2, Nullable<decimal> press, Nullable<decimal> pressure, Nullable<decimal> smoke, Nullable<decimal> suhu, Nullable<decimal> tegangan, Nullable<decimal> tegangan1, Nullable<decimal> tegangan2, Nullable<decimal> temp, Nullable<decimal> temprature, Nullable<decimal> vibe, Nullable<decimal> vibra, Nullable<System.DateTime> date_received)
        {
            var device_idParameter = device_id != null ?
                new ObjectParameter("device_id", device_id) :
                new ObjectParameter("device_id", typeof(string));
    
            var arusParameter = arus.HasValue ?
                new ObjectParameter("Arus", arus) :
                new ObjectParameter("Arus", typeof(decimal));
    
            var arus1Parameter = arus1.HasValue ?
                new ObjectParameter("Arus1", arus1) :
                new ObjectParameter("Arus1", typeof(decimal));
    
            var arus2Parameter = arus2.HasValue ?
                new ObjectParameter("Arus2", arus2) :
                new ObjectParameter("Arus2", typeof(decimal));
    
            var dayaParameter = daya.HasValue ?
                new ObjectParameter("Daya", daya) :
                new ObjectParameter("Daya", typeof(decimal));
    
            var daya1Parameter = daya1.HasValue ?
                new ObjectParameter("Daya1", daya1) :
                new ObjectParameter("Daya1", typeof(decimal));
    
            var daya2Parameter = daya2.HasValue ?
                new ObjectParameter("Daya2", daya2) :
                new ObjectParameter("Daya2", typeof(decimal));
    
            var distParameter = dist.HasValue ?
                new ObjectParameter("Dist", dist) :
                new ObjectParameter("Dist", typeof(decimal));
    
            var distancesParameter = distances.HasValue ?
                new ObjectParameter("Distances", distances) :
                new ObjectParameter("Distances", typeof(decimal));
    
            var electricParameter = electric.HasValue ?
                new ObjectParameter("Electric", electric) :
                new ObjectParameter("Electric", typeof(decimal));
    
            var enviroParameter = enviro.HasValue ?
                new ObjectParameter("Enviro", enviro) :
                new ObjectParameter("Enviro", typeof(decimal));
    
            var gasParameter = gas.HasValue ?
                new ObjectParameter("Gas", gas) :
                new ObjectParameter("Gas", typeof(decimal));
    
            var humidityParameter = humidity.HasValue ?
                new ObjectParameter("Humidity", humidity) :
                new ObjectParameter("Humidity", typeof(decimal));
    
            var koneksiParameter = koneksi.HasValue ?
                new ObjectParameter("Koneksi", koneksi) :
                new ObjectParameter("Koneksi", typeof(decimal));
    
            var powerParameter = power.HasValue ?
                new ObjectParameter("Power", power) :
                new ObjectParameter("Power", typeof(decimal));
    
            var power1Parameter = power1.HasValue ?
                new ObjectParameter("Power1", power1) :
                new ObjectParameter("Power1", typeof(decimal));
    
            var power2Parameter = power2.HasValue ?
                new ObjectParameter("Power2", power2) :
                new ObjectParameter("Power2", typeof(decimal));
    
            var pressParameter = press.HasValue ?
                new ObjectParameter("Press", press) :
                new ObjectParameter("Press", typeof(decimal));
    
            var pressureParameter = pressure.HasValue ?
                new ObjectParameter("Pressure", pressure) :
                new ObjectParameter("Pressure", typeof(decimal));
    
            var smokeParameter = smoke.HasValue ?
                new ObjectParameter("Smoke", smoke) :
                new ObjectParameter("Smoke", typeof(decimal));
    
            var suhuParameter = suhu.HasValue ?
                new ObjectParameter("Suhu", suhu) :
                new ObjectParameter("Suhu", typeof(decimal));
    
            var teganganParameter = tegangan.HasValue ?
                new ObjectParameter("Tegangan", tegangan) :
                new ObjectParameter("Tegangan", typeof(decimal));
    
            var tegangan1Parameter = tegangan1.HasValue ?
                new ObjectParameter("Tegangan1", tegangan1) :
                new ObjectParameter("Tegangan1", typeof(decimal));
    
            var tegangan2Parameter = tegangan2.HasValue ?
                new ObjectParameter("Tegangan2", tegangan2) :
                new ObjectParameter("Tegangan2", typeof(decimal));
    
            var tempParameter = temp.HasValue ?
                new ObjectParameter("Temp", temp) :
                new ObjectParameter("Temp", typeof(decimal));
    
            var tempratureParameter = temprature.HasValue ?
                new ObjectParameter("Temprature", temprature) :
                new ObjectParameter("Temprature", typeof(decimal));
    
            var vibeParameter = vibe.HasValue ?
                new ObjectParameter("Vibe", vibe) :
                new ObjectParameter("Vibe", typeof(decimal));
    
            var vibraParameter = vibra.HasValue ?
                new ObjectParameter("Vibra", vibra) :
                new ObjectParameter("Vibra", typeof(decimal));
    
            var date_receivedParameter = date_received.HasValue ?
                new ObjectParameter("date_received", date_received) :
                new ObjectParameter("date_received", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiveDataLOG_Result>("ReceiveDataLOG", device_idParameter, arusParameter, arus1Parameter, arus2Parameter, dayaParameter, daya1Parameter, daya2Parameter, distParameter, distancesParameter, electricParameter, enviroParameter, gasParameter, humidityParameter, koneksiParameter, powerParameter, power1Parameter, power2Parameter, pressParameter, pressureParameter, smokeParameter, suhuParameter, teganganParameter, tegangan1Parameter, tegangan2Parameter, tempParameter, tempratureParameter, vibeParameter, vibraParameter, date_receivedParameter);
        }
    
        public virtual int insertlogchange()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertlogchange");
        }
    
        public virtual ObjectResult<InsertDeviceLogNew_Result> InsertDeviceLogNew(Nullable<decimal> value, string macaddress, string mainSensor, string unit)
        {
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(decimal));
    
            var macaddressParameter = macaddress != null ?
                new ObjectParameter("macaddress", macaddress) :
                new ObjectParameter("macaddress", typeof(string));
    
            var mainSensorParameter = mainSensor != null ?
                new ObjectParameter("MainSensor", mainSensor) :
                new ObjectParameter("MainSensor", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertDeviceLogNew_Result>("InsertDeviceLogNew", valueParameter, macaddressParameter, mainSensorParameter, unitParameter);
        }
    
        public virtual ObjectResult<InsertNotification_Result> InsertNotification(string deviceID, string title, string problemstat, Nullable<System.DateTime> dateCreated, Nullable<decimal> valuecurrent, Nullable<decimal> valueupper, Nullable<decimal> valuelower, string sensorname, string devicename)
        {
            var deviceIDParameter = deviceID != null ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var problemstatParameter = problemstat != null ?
                new ObjectParameter("problemstat", problemstat) :
                new ObjectParameter("problemstat", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("dateCreated", dateCreated) :
                new ObjectParameter("dateCreated", typeof(System.DateTime));
    
            var valuecurrentParameter = valuecurrent.HasValue ?
                new ObjectParameter("valuecurrent", valuecurrent) :
                new ObjectParameter("valuecurrent", typeof(decimal));
    
            var valueupperParameter = valueupper.HasValue ?
                new ObjectParameter("valueupper", valueupper) :
                new ObjectParameter("valueupper", typeof(decimal));
    
            var valuelowerParameter = valuelower.HasValue ?
                new ObjectParameter("valuelower", valuelower) :
                new ObjectParameter("valuelower", typeof(decimal));
    
            var sensornameParameter = sensorname != null ?
                new ObjectParameter("sensorname", sensorname) :
                new ObjectParameter("sensorname", typeof(string));
    
            var devicenameParameter = devicename != null ?
                new ObjectParameter("Devicename", devicename) :
                new ObjectParameter("Devicename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsertNotification_Result>("InsertNotification", deviceIDParameter, titleParameter, problemstatParameter, dateCreatedParameter, valuecurrentParameter, valueupperParameter, valuelowerParameter, sensornameParameter, devicenameParameter);
        }
    }
}
